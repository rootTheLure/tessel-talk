// Generated by CoffeeScript 1.6.3
var CubeDemo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

CubeDemo = (function() {
  CubeDemo.rotvecs = {
    LEFT: [0, -1, 0],
    RIGHT: [0, 1, 0],
    UP: [0, 0, -1],
    DOWN: [0, 0, 1],
    FORWARD: [-1, 0, 0],
    BACK: [1, 0, 0]
  };

  function CubeDemo() {
    this.render = __bind(this.render, this);
    var _this = this;
    this.initScene();
    this.loadTexture(function() {
      _this.initCube();
      return _this.render();
    });
  }

  CubeDemo.prototype.initScene = function() {
    this.scene = new THREE.Scene;
    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    this.renderer = new THREE.WebGLRenderer;
    this.renderer.setSize(window.innerWidth - 16, window.innerHeight);
    return document.body.appendChild(this.renderer.domElement);
  };

  CubeDemo.prototype.initCube = function() {
    var geometry, light, material;
    geometry = new THREE.BoxGeometry(1, 1, 1);
    material = new THREE.MeshLambertMaterial({
      map: this.cubeTexture
    });
    this.cube = new THREE.Mesh(geometry, material);
    light = new THREE.PointLight(0xffffff, 1, 100);
    light.position.set(0, 0, 3);
    this.scene.add(light);
    this.scene.add(this.cube);
    return this.camera.position.set(0, 0, 2.5);
  };

  CubeDemo.prototype.render = function() {
    requestAnimationFrame(this.render);
    return this.renderer.render(this.scene, this.camera);
  };

  CubeDemo.prototype.loadTexture = function(done) {
    return this.cubeTexture = THREE.ImageUtils.loadTexture('js.png', {}, done);
  };

  CubeDemo.prototype.rotate = function(direction) {
    var frameCount, vector, x, y, z,
      _this = this;
    vector = CubeDemo.rotvecs[direction];
    if (!vector) {
      return;
    }
    x = vector[0], y = vector[1], z = vector[2];
    clearInterval(this.animInterval);
    frameCount = 0;
    return this.animInterval = setInterval((function() {
      _this.cube.rotation.x += x * Math.PI / 144;
      _this.cube.rotation.y += y * Math.PI / 144;
      _this.cube.rotation.z += z * Math.PI / 144;
      if (++frameCount === 24) {
        return clearInterval(_this.animInterval);
      }
    }), 16.667);
  };

  return CubeDemo;

})();
