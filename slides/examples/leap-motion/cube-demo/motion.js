// Generated by CoffeeScript 1.6.3
var Motion;

Motion = (function() {
  function Motion() {
    var gesture,
      _this = this;
    this.controller = new Leap.Controller({
      enableGestures: true
    });
    this.log = new Log('pre.log');
    this.controller.on('connect', function() {
      return _this.log.write('Leap connected!');
    });
    this.controller.on('ready', function() {
      return _this.log.write('Leap ready!');
    });
    this.controller.connect();
    gesture = {};
    this.controller.on('frame', function(_arg) {
      var direction, dx, dy, dz, gestures, swipe, swipes, vector, vx, vy, vz, _ref, _ref1;
      gestures = _arg.gestures;
      swipes = gestures.filter(function(gesture) {
        return gesture.type === 'swipe';
      });
      swipe = swipes[0];
      if (swipes.length > 0) {
        if (swipe.state === 'start') {
          gesture.vector = swipe.direction;
          return gesture.count = 1;
        } else if (swipe.state === 'stop') {
          vector = gesture.vector.map(function(coord) {
            return coord / gesture.count;
          });
          direction = _this.vectorToDirection(vector);
          _this.log.write("" + (vector.map(function(item) {
            return item.toFixed(3);
          })) + " " + direction + "\n");
          return typeof _this.swipeHandler === "function" ? _this.swipeHandler(direction) : void 0;
        } else {
          _ref = gesture.vector, vx = _ref[0], vy = _ref[1], vz = _ref[2];
          _ref1 = swipe.direction, dx = _ref1[0], dy = _ref1[1], dz = _ref1[2];
          gesture.vector = [vx + dx, vy + dy, vz + dz];
          return gesture.count++;
        }
      }
    });
  }

  Motion.prototype.vectorToDirection = function(vector) {
    var absvalIndex, x, y, z;
    x = vector[0], y = vector[1], z = vector[2];
    absvalIndex = vector.reduce((function(acc, coord, index) {
      if (Math.abs(coord) > Math.abs(vector[acc])) {
        return index;
      } else {
        return acc;
      }
    }), 0);
    switch (absvalIndex) {
      case 0:
        if (x > 0) {
          return Motion.directions.RIGHT;
        } else {
          return Motion.directions.LEFT;
        }
        break;
      case 1:
        if (y > 0) {
          return Motion.directions.UP;
        } else {
          return Motion.directions.DOWN;
        }
        break;
      case 2:
        if (z > 0) {
          return Motion.directions.BACK;
        } else {
          return Motion.directions.FORWARD;
        }
    }
  };

  Motion.prototype.onswipe = function(swipeHandler) {
    this.swipeHandler = swipeHandler;
  };

  Motion.directions = {
    LEFT: 'LEFT',
    RIGHT: 'RIGHT',
    UP: 'UP',
    DOWN: 'DOWN',
    FORWARD: 'FORWARD',
    BACK: 'BACK'
  };

  return Motion;

})();
